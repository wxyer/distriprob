"use strict";

/**
 * (C) Copyright Zachary Martin 2018.
 * Use, modification and distribution are subject to the
 * Boost Software License:
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */


/**
 * Instances of this class are meant to be thrown when the conversion of a value from
 * one type to another fails.
 */
export class ConversionError {
  public static className: string;

  public static init0(): void {
    ConversionError.className = "ConversionError";
  }

  public readonly name: string;
  public readonly message: string;
  public readonly unconvertableValueStr: string;
  public readonly expectedSourceType: TypeDescriptor;
  public readonly actualSourceType: string;
  public readonly targetType: TypeDescriptor;
  public readonly className: string;
  public readonly functionName: string;
  public readonly valueIdentifier: string;
  public readonly stack: string | undefined;

  constructor(
    className: string,
    functionName: string,
    valueIdentifier: string,
    expectedSourceType: TypeDescriptor,
    targetType: TypeDescriptor,
    value: any
  ) {
    this.name = ConversionError.className;
    this.unconvertableValueStr = typeof value === "object" ?
      JSON.stringify(value)
      :
      value.toString();
    this.expectedSourceType = expectedSourceType;
    this.valueIdentifier = valueIdentifier;
    this.targetType = targetType;
    this.className = className;
    this.functionName = functionName;
    this.stack = (new Error("")).stack;
    this.actualSourceType = ErrorUtil.typeDescription(value);
    this.message = `Could not convert ${this.unconvertableValueStr
    } to a ${this.targetType}.`
  }

  public static instance(x: any): x is ConversionError {
    return typeof x === "object" && x !== null && x.name === ConversionError.className &&
      typeof x.message === "string" && typeof x.className === "string" &&
      typeof x.functionName === "string" && typeof x.valueIdentifier === "string" &&
      (typeof x.stack === "undefined" || typeof x.stack === "string") &&
      typeof x.unconvertableValueStr === "string" &&
      ErrorUtil.isTypeDescriptor(x.expectedSourceType) &&
      typeof x.actualSourceType === "string" &&
      ErrorUtil.isTypeDescriptor(x.targetType);
  }


  // class dependencies
  public static dependencies(): Set<Class> {
    return new Set([
      ErrorUtil,
    ]);
  }
}


// *** imports come at end to avoid circular dependency ***

// interface/type imports
import {Class} from "../interfacesAndTypes/Class";
import {TypeDescriptor} from "../interfacesAndTypes/TypeDescriptor";

// functional imports
import {ErrorUtil as ErrorUtilAlias} from "./ErrorUtil";
const ErrorUtil = ErrorUtilAlias;