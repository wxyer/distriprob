"use strict";

/**
 * (C) Copyright Zachary Martin 2018.
 * Use, modification and distribution are subject to the
 * Boost Software License:
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */

import {int} from "../interfaces/int";
import {float} from "../interfaces/float";

import {Integer as IntegerAlias} from "../dataTypes/Integer";
const Integer = IntegerAlias;

import {Float as FloatAlias} from "../dataTypes/Float";
const Float = FloatAlias;

import {C as CAlias} from "../constants/C";
const C = CAlias;

import {Core as CoreAlias} from "./Core";
const Core = CoreAlias;


export class P {
  public static p: P;

  public readonly numDigits: number;
  public readonly numDigitsInt: int;
  public readonly binaryDigits: number;
  public readonly decimalDigits: number;
  public readonly quadraticConvergenceSteps: number;
  public readonly epsilon: float;
  public readonly maxSafeInt: float;

  constructor(numDoubles: number, binaryDigits: number, decimalDigits: number) {
    const numDoublesMinus1 = numDoubles - 1;
    this.numDigits = numDoubles;
    this.numDigitsInt = Core.numberToInt(numDoubles);
    this.binaryDigits = binaryDigits;
    this.decimalDigits = decimalDigits;
    this.quadraticConvergenceSteps = P.quadraticConvergenceSteps(numDoublesMinus1);
    this.epsilon = P.epsilonFromNumDubs(numDoublesMinus1);
    this.maxSafeInt = P.maxSafeInteger(numDoublesMinus1);
  }

  public static setDecimalDigits(digits: number): void {
    P.changeP(P.createPFromDecimalDigits(digits));
  }

  public static setBinaryDigits(digits: number): void {
    P.changeP(P.createPFromBinaryDigits(digits));
  }

  public static setNumDigits(numDigits: number): void {
    P.changeP(P.createPFromNumDigits(numDigits));
  }

  public static createPFromDecimalDigits(decimalDigits: number): P {
    const binaryDigits = Math.ceil(3.321928094887362 * decimalDigits);
    const numDigits =
      Math.ceil(binaryDigits / C.POWER_OF_TWO_FOR_BASE) + 1;

    return new P(numDigits, binaryDigits, decimalDigits);
  }

  public static createPFromBinaryDigits(binaryDigits: number): P {
    const decimalDigits = Math.floor(0.3010299956639812 * binaryDigits);
    const numDigits = Math.ceil(binaryDigits / C.POWER_OF_TWO_FOR_BASE) + 1;

    return new P(numDigits, binaryDigits, decimalDigits);
  }

  public static createPFromNumDigits(numDigits: number): P {
    const binaryDigits = numDigits * C.POWER_OF_TWO_FOR_BASE;
    const decimalDigits = Math.floor(0.3010299956639812 * binaryDigits);

    return new P(numDigits + 1, binaryDigits, decimalDigits);
  }

  public static createRelativeP(p: P, relativeNumDigits: number): P {
    return P.createPFromNumDigits(
      p.numDigits - 1 + relativeNumDigits
    );
  }

  private static changeP(newP: P): void {
    P.p = newP;
  }

  private static quadraticConvergenceSteps(numDoubles: number): number {
    return Math.ceil(Math.log2((numDoubles * C.POWER_OF_TWO_FOR_BASE + 1) / 50));
  }

  private static epsilonFromNumDubs(numDoubles: number): float {
    return new Float(
      C.I_2,
      Core.numberToIntUnchecked(-numDoubles)
    )
  }

  private static maxSafeInteger(numDigits: number): float {
    return new Float(
      new Integer(
        false,
        Uint32Array.from(Array(numDigits).fill(C.BASE_MINUS_ONE))
      ),
      Core.numberToIntUnchecked(numDigits - 1)
    );
  }
}

