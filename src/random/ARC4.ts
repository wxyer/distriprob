"use strict";

/**
 * (C) Copyright Zachary Martin 2018.
 * Use, modification and distribution are subject to the
 * Boost Software License:
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */


export interface ARC4State extends IRandomState {
  readonly type: "ARC4";
  readonly s: number[];
  readonly i: number;
  readonly j: number;
}


export class ARC4 {
  public static className: "ARC4";

  public static init0(): void {
    ARC4.className = "ARC4";
  }

  public static isState(x: any): x is ARC4State {
    if (typeof x === "object" && x !== null && typeof x.type === "string" &&
      x.type === ARC4.className && typeof x.i === "number" && typeof x.j === "number"
      && Array.isArray(x.s) && x.s.length === 256) {
      for(let i = 0; i < 256; i++) {
        if (typeof x.s[i] !== "number") {
          return false;
        }
      }

      return true;
    } else {
      return false;
    }
  }

  private _i: number;
  private _j: number;
  private _s: Uint8Array;

  constructor(seed: number | string | null | undefined | ARC4State) {
    if (ARC4.isState(seed)) {
      this._i = seed.i;
      this._j = seed.j;
      this._s = Uint8Array.from(seed.s);
    } else {
      const seedType = typeof seed;
      let key: Uint8Array;

      if (seedType === "undefined" || seed === null) {
        // get a random seed
        key = <Uint8Array> RandomUtil.getRandomTypedArray(
          256,
          8
        );
      } else if (seedType === "number" || seedType === "string") {
        key = <Uint8Array> RandomUtil.getSeededTypedArray(
          256,
          8,
          seed + "\0" // forcing numbers into strings here
        );
      } else {
        throw new DomainError(
          ARC4.className,
          "constructor",
          {seed: {value: seed, expectedType: "seed"}},
          `An ARC4 random number generator seed must be a number, string, or valid${""
          } ARC4 state`
        );
      }

      this._s = new Uint8Array(256);

      for (let i = 0; i < 256; i++) {
        this._s[i] = i;
      }

      let j = 0;
      let temp: number;

      for (let i = 0; i < 256; i++) {
        j = (j + this._s[i] + key[i % key.length]) & 255;
        temp = this._s[i];
        this._s[i] = this._s[j];
        this._s[j] = temp;
      }

      this._i = 0;
      this._j = 0;

      // drop 1280 first values to make guessing initial key/state harder
      for (let i = 0; i < 1280; i++) { this.next(); }
    }
  }

  public get outputWidth(): number { return 8; }

  public next(): number {
    this._i = (this._i + 1) & 255;
    this._j = (this._j + this._s[this._i]) & 255;
    let temp = this._s[this._i];       // }
    this._s[this._i] = this._s[this._j]; // }- swap s[i] and s[j]
    this._s[this._j] = temp;           // }

    return this._s[(this._s[this._i] + this._s[this._j]) & 255];
  }

  public state(): ARC4State {
    const s = new Array(256).fill(0);

    for (let i = 0; i < 256; i++) {
      s[i] = this._s[i];
    }

    return {
      type: ARC4.className,
      s: s,
      i: this._i,
      j: this._j
    };
  }


  // class dependencies
  public static dependencies(): Set<Class> {
    return new Set([
      RandomUtil, DomainError,
    ]);
  }
}


// *** imports come at end to avoid circular dependency ***

// interface/type imports
import {IRandomState} from "../interfacesAndTypes/IRandomState";
import {Class} from "../interfacesAndTypes/Class";


// functional imports
import {RandomUtil as RandomUtilAlias} from "./RandomUtil";
const RandomUtil = RandomUtilAlias;

import {DomainError as DomainErrorAlias} from "../errors/DomainError";
const DomainError = DomainErrorAlias;
