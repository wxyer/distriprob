"use strict";

/**
 * (C) Copyright Zachary Martin 2018.
 * Use, modification and distribution are subject to the
 * Boost Software License:
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */


export class FloatInterfaceGen {
  public static className: string;
  public static InterfaceName: string;

  public static init0(): void {
    FloatInterfaceGen.className = "FloatInterfaceGen";
    FloatInterfaceGen.InterfaceName = "Float";
  }

  public static get(): string {
    let methodDeclarations = "";
    const fws = Library.getAllFloatMethodFWs();

    for(let i = 0; i < fws.length; i++) {
      const fw = fws[i];
      methodDeclarations += `  ${fw.name}${TypeStr.function(fw, ":")};`;

      if (i !== fws.length - 1) {
        methodDeclarations += "\n";
      }
    }

    return `interface ${FloatInterfaceGen.InterfaceName} {\n${methodDeclarations}\n}`
  }


  public static dependencies(): Set<Class> {
    return new Set([
      FunctionWrapper, Library, Init, TypeStr
    ]);
  }
}


// *** imports come at end to avoid circular dependency ***

// type/interface imports
import {Class} from "../../interfacesAndTypes/Class";


// functional imports
import {FunctionWrapper} from "../functionWrapping/FunctionWrapper";
import {Library} from "../../core/Library";
import {Init} from "../Init";
import {TypeStr} from "../TypeStr";


TypeStr.init0();
FloatInterfaceGen.init0();

Init.loadLibrary(null);

console.log(FloatInterfaceGen.get());

// const fws = Library.getAllFloatMethodFWs();
//
//
// let result = `"use strict"
//
// /**
//  * (C) Copyright Zachary Martin 2018.
//  * Use, modification and distribution are subject to the
//  * Boost Software License:
//  *
//  * Permission is hereby granted, free of charge, to any person or organization
//  * obtaining a copy of the software and accompanying documentation covered by
//  * this license (the "Software") to use, reproduce, display, distribute,
//  * execute, and transmit the Software, and to prepare derivative works of the
//  * Software, and to permit third-parties to whom the Software is furnished to
//  * do so, all subject to the following:
//  *
//  * The copyright notices in the Software and this entire statement, including
//  * the above license grant, this restriction and the following disclaimer,
//  * must be included in all copies of the Software, in whole or in part, and
//  * all derivative works of the Software, unless such copies or derivative
//  * works are solely in the form of machine-executable object code generated by
//  * a source language processor.
//  *
//  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
//  * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
//  * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
//  * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
//  * DEALINGS IN THE SOFTWARE.
//  *
//  */
//
//
// export class Float {
//
//   public static className: string;
//
//   public static init0(): void {
//     Float.className = "Float";
//   }
//
// ${staticDeclarations(fws)}
//
//   public static init(): void {
// ${staticDefinitions(fws)}
//   }
//
//   public static getFloat(x: Float): float { return x.f; }
//
//   public static instance(x: any): x is Float {
//     return typeof x === "object" && x !== null && Core.instance(x.f) &&
//       typeof x.abs === "function" && typeof x.isPOSITIVE_INFINITY === "function";
//   }
//
//
//   private readonly f: float;
//
//   constructor(f: float) {
//     this.f = f;
//   }
//
// ${instanceMethods(fws)}
//
//   public static dependencies(){
//     return new Set([
//
//     ]);
//   }
// }
//
//
// `;
//
// console.log(result);
//
// function staticDeclarations(fws: Array<FunctionWrapper>): string {
//   let result = "";
//
//   for(let fw of fws) {
//     result += `  private static ${fw.name
//     }: ${TypeStr.function(fw, " =>", true)};\n`;
//   }
//
//   return result;
// }
//
// function staticDefinitions(fws: Array<FunctionWrapper>): string {
//   let result = "";
//
//   for(let fw of fws) {
//     result += `    Float.${fw.name
//     } = Library.getFloatMethodFW("${fw.name}").execute();\n`
//   }
//
//   return result;
// }
//
// function instanceMethods(fws: Array<FunctionWrapper>): string {
//   let result = "";
//
//   for(let fw of fws) {
//     let argList = "";
//
//     for (let i = 0; i < fw.params.length; i++) {
//       if (fw.params[i].instance) {
//         argList += "this"
//       } else {
//         argList += fw.params[i].name;
//       }
//
//       if (i !== fw.params.length - 1) {
//         argList += ", ";
//       }
//     }
//
//     result += `  public ${fw.name}${TypeStr.function(fw, ":", false)} {
//     return Float.${fw.name}(${argList});
//   }\n`
//   }
//
//   return result;
// }

