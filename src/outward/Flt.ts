"use strict";

/**
 * (C) Copyright Zachary Martin 2018.
 * Use, modification and distribution are subject to the
 * Boost Software License:
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */




export class Flt {

  private readonly f: float;

  constructor(f: float) {
    this.f = f;
  }

  public abs(): Flt {
    if (!Comparison.isNegative(this.f)) {
      return this;
    } else {
      return new Flt(Sign.negateF(this.f));
    }
  }

  public static getFloat(x: Flt): float { return x.f; }

  public static instance(x: any): x is Flt {
    return typeof x === "object" && x !== null && Core.instance(x.f) &&
      typeof x.abs === "function" && typeof x.isPOSITIVE_INFINITY === "function";
  }


  public acos(p?: P | null | undefined): Flt {
    // TODO: implement this function
    throw new Error("this method is not implemented yet");
  }

  public acosh(p?: P | null | undefined): Flt {
    // TODO: implement this function
    throw new Error("this method is not implemented yet");
  }

  public asin(p?: P | null | undefined): Flt {
    // TODO: implement this function
    throw new Error("this method is not implemented yet");
  }

  public asinh(p?: P | null | undefined): Flt {
    // TODO: implement this function
    throw new Error("this method is not implemented yet");
  }

  public atan(p?: P | null | undefined): Flt {
    // TODO: implement this function
    throw new Error("this method is not implemented yet");
  }

  public atanh(p?: P | null | undefined): Flt {
    // TODO: implement this function
    throw new Error("this method is not implemented yet");
  }

  public cbrt(p?: P | null | undefined): Flt {
    // TODO: implement this function
    throw new Error("this method is not implemented yet");
  }

  public ceil(): Flt {
    // TODO: implement this function
    throw new Error("this method is not implemented yet");
  }

  public ceilI(): Int {
    // TODO: implement this function
    throw new Error("this method is not implemented yet");
  }

  public cos(p?: P | null | undefined): Flt {
    // TODO: implement this function
    throw new Error("this method is not implemented yet");
  }

  public cosh(p?: P | null | undefined): Flt {
    // TODO: implement this function
    throw new Error("this method is not implemented yet");
  }

  public divBy(divisor: Flt | Int | number | string, p?: P | null | undefined): Flt {
    // TODO: implement this function
    throw new Error("this method is not implemented yet");
  }

  public divide(dividend: Flt | Int | number | string, p?: P | null | undefined): Flt {
    // TODO: implement this function
    throw new Error("this method is not implemented yet");
  }

  public equals(y: Flt | Int | number): boolean {
    // TODO: implement this function
    throw new Error("this method is not implemented yet");
  }

  public exp(p?: P | null | undefined): Flt {
    // TODO: implement this function
    throw new Error("this method is not implemented yet");
  }

  public expm1(p?: P | null | undefined): Flt {
    // TODO: implement this function
    throw new Error("this method is not implemented yet");
  }

  public floor(): Flt {
    // TODO: implement this function
    throw new Error("this method is not implemented yet");
  }

  public floorI(): Int {
    // TODO: implement this function
    throw new Error("this method is not implemented yet");
  }

  public gt(y: Flt | Int | number): boolean {
    // TODO: implement this function
    throw new Error("this method is not implemented yet");
  }

  public gte(y: Flt | Int | number): boolean {
    // TODO: implement this function
    throw new Error("this method is not implemented yet");
  }

  public isEven(): boolean { return Parity.isEven(this.f); }

  public isFinite(): boolean { return Comparison.isFinite(this.f); }

  public isInteger(): boolean { return Conversion.isInteger(this.f); }

  public isNaN(): boolean { return Comparison.isNaN(this.f); }

  public isNegative(): boolean { return Comparison.isNegative(this.f); }

  public isNEGATIVE_INFINITY(): boolean { return Comparison.isNEGATIVE_INFINITY(this.f); }

  public isOdd(): boolean { return Parity.isOdd(this.f); }

  public isOne(): boolean { return Comparison.isOne(this.f); }

  public isPositive(): boolean { return Comparison.isPositive(this.f); }

  public isPOSITIVE_INFINITY(): boolean { return Comparison.isPOSITIVE_INFINITY(this.f); }

  public isZero(): boolean { return Comparison.isZero(this.f); }

  public ln(p?: P | null | undefined): Flt {
    // TODO: implement this function
    throw new Error("this method is not implemented yet");
  }

  public log(p?: P | null | undefined): Flt {
    // TODO: implement this function
    throw new Error("this method is not implemented yet");
  }

  public log1p(p?: P | null | undefined): Flt {
    // TODO: implement this function
    throw new Error("this method is not implemented yet");
  }

  public log2(p?: P | null | undefined): Flt {
    // TODO: implement this function
    throw new Error("this method is not implemented yet");
  }

  public log10(p?: P | null | undefined): Flt {
    // TODO: implement this function
    throw new Error("this method is not implemented yet");
  }

  public logBase(base: Flt | Int | number | string, p?: P | null | undefined): Flt {
    // TODO: implement this function
    throw new Error("this method is not implemented yet");
  }

  public lt(y: Flt | Int | number): boolean {
    // TODO: implement this function
    throw new Error("this method is not implemented yet");
  }

  public lte(y: Flt | Int | number): boolean {
    // TODO: implement this function
    throw new Error("this method is not implemented yet");
  }

  public minus(y: Flt | Int | number | string, p?: P | null | undefined): Flt {
    // TODO: implement this function
    throw new Error("this method is not implemented yet");
  }

  public mod(
    y: Flt | Int | number | string,
    type?: "euclidean" | "trunc" | "ceil" | "floor" | "round",
    p?: P | null | undefined
  ): Flt {
    // TODO: implement this function
    throw new Error("this method is not implemented yet");
  }

  public neg(): Flt { return new Flt(Sign.negateF(this.f)); }

  public plus(y: Flt | Int | number | string, p?: P | null | undefined): Flt {
    // TODO: implement this function
    throw new Error("this method is not implemented yet");
  }

  public reciprocal(p?: P | null | undefined): Flt {
    // TODO: implement this function
    throw new Error("this method is not implemented yet");
  }

  public root(degree: Flt | Int | number | string, p?: P | null | undefined): Flt {
    // TODO: implement this function
    throw new Error("this method is not implemented yet");
  }

  public round(): Flt {
    // TODO: implement this function
    throw new Error("this method is not implemented yet");
  }

  public roundI(): Int {
    // TODO: implement this function
    throw new Error("this method is not implemented yet");
  }

  public sin(p?: P | null | undefined): Flt {
    // TODO: implement this function
    throw new Error("this method is not implemented yet");
  }

  public sinh(p?: P | null | undefined): Flt {
    // TODO: implement this function
    throw new Error("this method is not implemented yet");
  }

  public sqrt(p?: P | null | undefined): Flt {
    // TODO: implement this function
    throw new Error("this method is not implemented yet");
  }

  public squared(p?: P | null | undefined): Flt {
    // TODO: implement this function
    throw new Error("this method is not implemented yet");
  }

  public tan(p?: P | null | undefined): Flt {
    // TODO: implement this function
    throw new Error("this method is not implemented yet");
  }

  public tanh(p?: P | null | undefined): Flt {
    // TODO: implement this function
    throw new Error("this method is not implemented yet");
  }

  public times(y: Flt | Int | number | string, p?: P | null | undefined): Flt {
    // TODO: implement this function
    throw new Error("this method is not implemented yet");
  }

  public toJSON(): string {
    return JSONFloat.stringify(this.f);
  }

  public toNumber(): number {
    return Core.floatToNumber(this.f);
  }

  public toPow(exponent: Flt | Int | number | string, p?: P | null | undefined): Flt {
    // TODO: implement this function
    throw new Error("this method is not implemented yet");
  }

  public toString(
    radix?: number | null | undefined,
    maxPrecision?: number | null | undefined
  ): string {
    return StringWriter.toStr(this.f, radix, maxPrecision);
  }

  public trunc(): Flt {
    // TODO: implement this function
    throw new Error("this method is not implemented yet");
  }

  public truncI(): Int {
    // TODO: implement this function
    throw new Error("this method is not implemented yet");
  }
}


// *** imports come at end to avoid circular dependency ***

import {float} from "../interfaces/float";

import {Int as IntAlias} from "./Int";
export type Int = IntAlias;

import {C as CAlias} from "../constants/C";
const C = CAlias;

import {Comparison as ComparisonAlias} from "../basicFunctions/Comparison";
const Comparison = ComparisonAlias;

import {Sign as SignAlias} from "../basicFunctions/Sign";
const Sign = SignAlias;

import {Parity as ParityAlias} from "../basicFunctions/Parity";
const Parity = ParityAlias;

import {Core as CoreAlias} from "../core/Core";
const Core = CoreAlias;

import {Conversion as ConversionAlias} from "../core/Conversion";
const Conversion = ConversionAlias;

import {P as PAlias} from "../dataTypes/P";
export type P = PAlias;

import {ArgHandler as ArgHandlerAlias} from "./ArgHandler";
const ArgHandler = ArgHandlerAlias;

import {JSONFloat as JSONFloatAlias} from "../dataTypes/JSONFloat";
const JSONFloat = JSONFloatAlias;

import {StringWriter as StringWriterAlias} from "../core/StringWriter";
const StringWriter = StringWriterAlias;