"use strict";

/**
 * (C) Copyright Zachary Martin 2018.
 * Use, modification and distribution are subject to the
 * Boost Software License:
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */

import {int} from "../interfaces/int";
import {float} from "../interfaces/float";

import {Core as CoreAlias} from "../core/Core";
const Core = CoreAlias;

import {Comparison as ComparisonAlias} from "../basicFunctions/Comparison";
const Comparison = ComparisonAlias;

import {Conversion as ConversionAlias} from "../core/Conversion";
const Conversion = ConversionAlias;

export type DefaultSpec = {
  canBeNull?: boolean,
  canBeUndefined?: boolean,
  value: float | int | number | string | boolean | null,
};

export type BoundSpec = {
  value: number | string | int | float,
  type: "open" | "closed",
  descriptor?: string | null,
}

export type DomainDescription =
  "real" |
  "positive real" |
  "nonnegative real" |
  "negative real" |
  "nonpositive real" |
  "integer" |
  "positive integer" |
  "nonnegative integer" |
  "negative integer" |
  "nonpositive integer" |
  "positive noninteger real" |
  "nonnegative noninteger real" |
  "negative noninteger real" |
  "nonpositive noninteger real" |
  "probability" |
  "positive infinity" |
  "negative infinity" |
  "NaN";

export type DomainSpec = {
  upperBound?: BoundSpec,
  lowerBound?: BoundSpec,
  unacceptableValues?: Array<number | string | float | int>,
  finiteAcceptableValues?: Array<number | string | float | int>,
  description: Array<DomainDescription>,
  out: "number" | "int" | "float"
}

export type ParameterSpec = {
  value: any,
  default?: DefaultSpec,
  finiteAcceptableValues?: Array<any>,
  domain: DomainSpec | "boolean" | "string" | "seed" | "prec",
};

export type functionSpec = {
  name: string,
  params: {[parameterName: string]: ParameterSpec};
  paramOrder: string[];
}


export class ArgHandling {
  private readonly functionName: string;
  private readonly paramSpecs: {[parameterName: string]: ParameterSpec};
  private readonly conversionErrors: {[parameterName: string]: string};
  private readonly domainErrors: {[parameterName: string]: string};
  public readonly values: Array<any>;

  constructor(
    functionName: string,
    paramSpecs: {[parameterName: string]: ParameterSpec},
    paramOrder: Array<String>
  ) {
    this.functionName = functionName;
    this.paramSpecs = paramSpecs;
    this.conversionErrors = {};
    this.domainErrors = {};
    this.values = [];
  }
}