"use strict";

/**
 * (C) Copyright Zachary Martin 2018.
 * Use, modification and distribution are subject to the
 * Boost Software License:
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */


export class Int {
  private i: int;

  constructor(i: int) {
    this.i = i;
  }

  public abs(): Int {
    // TODO: implement this function
    throw new Error("this method is not implemented yet");
  }

  public dec(): Int {
    // TODO: implement this function
    throw new Error("this method is not implemented yet");
  }

  public divBy(
    divisor: Flt | Int | number | string,
    type?: "euclidean"| "trunc" | "ceil" | "floor" | "round" | null | undefined
  ): {quotient: Int, remainder: Int} {
    // TODO: implement this function
    throw new Error("this method is not implemented yet");
  }

  public divide(
    dividend: Flt | Int | number | string,
    type?: "euclidean"| "trunc" | "ceil" | "floor" | "round" | null | undefined
  ): {quotient: Int, remainder: Int} {
    // TODO: implement this function
    throw new Error("this method is not implemented yet");
  }

  public equals(y: Flt | Int | number): boolean {
    // TODO: implement this function
    throw new Error("this method is not implemented yet");
  }

  public gt(y: Flt | Int | number): boolean {
    // TODO: implement this function
    throw new Error("this method is not implemented yet");
  }

  public gte(y: Flt | Int | number): boolean {
    // TODO: implement this function
    throw new Error("this method is not implemented yet");
  }

  public inc(): Int {
    // TODO: implement this function
    throw new Error("this method is not implemented yet");
  }

  public isEven(): boolean {
    // TODO: implement this function
    throw new Error("this method is not implemented yet");
  }

  public isFinite(): boolean {
    // TODO: implement this function
    throw new Error("this method is not implemented yet");
  }

  public isInteger(): boolean {
    // TODO: implement this function
    throw new Error("this method is not implemented yet");
  }

  public isNaN(): boolean {
    // TODO: implement this function
    throw new Error("this method is not implemented yet");
  }

  public isNegative(): boolean {
    // TODO: implement this function
    throw new Error("this method is not implemented yet");
  }

  public isNEGATIVE_INFINITY(): boolean {
    // TODO: implement this function
    throw new Error("this method is not implemented yet");
  }

  public isOdd(): boolean {
    // TODO: implement this function
    throw new Error("this method is not implemented yet");
  }

  public isOne(): boolean {
    // TODO: implement this function
    throw new Error("this method is not implemented yet");
  }

  public isPositive(): boolean {
    // TODO: implement this function
    throw new Error("this method is not implemented yet");
  }

  public isPOSITIVE_INFINITY(): boolean {
    // TODO: implement this function
    throw new Error("this method is not implemented yet");
  }

  public isZero(): boolean {
    // TODO: implement this function
    throw new Error("this method is not implemented yet");
  }

  public lt(y: Flt | Int | number): boolean {
    // TODO: implement this function
    throw new Error("this method is not implemented yet");
  }

  public lte(y: Flt | Int | number): boolean {
    // TODO: implement this function
    throw new Error("this method is not implemented yet");
  }

  public minus(y: Flt | Int | number | string): Int {
    // TODO: implement this function
    throw new Error("this method is not implemented yet");
  }

  public neg(): Int {
    // TODO: implement this function
    throw new Error("this method is not implemented yet");
  }

  public plus(b: Flt | Int | number | string): Int {
    // TODO: implement this function
    throw new Error("this method is not implemented yet");
  }

  public squared(): Int {
    // TODO: implement this function
    throw new Error("this method is not implemented yet");
  }

  public toJSON(): string {
    return JSONInt.stringify(this.i);
  }

  public toNumber(): number {
    return Core.intToNumber(this.i);
  }

  public toPow(exponent: Flt | Int | number | string): Int {
    // TODO: implement this function
    throw new Error("this method is not implemented yet");
  }

  public toString(
    radix?: number | null | undefined,
    maxPrecision?: number | null | undefined
  ): string {
    return StringWriter.toStr(this.i, radix, maxPrecision);
  }



  public static getInt(a: Int): int { return a.i; }

  public static instance(a: any): a is Int {
    return typeof a === "object" && a !== null && Core.instanceI(a.i) &&
      typeof a.abs === "function" && typeof a.isPOSITIVE_INFINITY === "function";
  }
}

import {int} from "../interfaces/int";

import {Flt as FltAlias} from "./Flt";
export type Flt = FltAlias;

import {JSONInt as JSONIntAlias} from "./JSONInt";
const JSONInt = JSONIntAlias;

import {Core as CoreAlias} from "../core/Core";
const Core = CoreAlias;

import {StringWriter as StringWriterAlias} from "../core/StringWriter";
const StringWriter = StringWriterAlias;

