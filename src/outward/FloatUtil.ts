"use strict";

/**
 * (C) Copyright Zachary Martin 2018.
 * Use, modification and distribution are subject to the
 * Boost Software License:
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */


export class FloatUtil {
  public static className: string;
  public static constructorFloat;
  public static methodNames: Array<string>;

  public static init0(): void {
    FloatUtil.className = "FloatUtil";
  }

  public static init(): void {
    class Float {
      constructor(private readonly f: float) {}
      public static getfloat(x: Float): float {
        return x.f;
      }
    }

    for (let fw of Library.getAllFloatMethodFWs()) {
      Float.prototype[fw.name] = fw.method();
    }

    FloatUtil.constructorFloat = Float;
    FloatUtil.getfloat = Float.getfloat;
    FloatUtil.methodNames = Library.getAllFloatMethodNames();
  }

  public static createFloat(f: float): Float {
    return new FloatUtil.constructorFloat(f);
  }

  public static isFloat(x: any): x is Float {
    if (typeof x === "undefined") {
      return false;
    }

    // if (x instanceof FloatUtil.constructorFloat) {
    //   console.log("heyo");
    //   return true;
    // }

    if (Core.instance(x.f)) {
      for (let methodName of FloatUtil.methodNames) {
        console.log("checking method:", methodName);
        if (typeof x[methodName] !== "function") {
          return false;
        }
      }

      return true;
    }

    return false;
  }

  public static getfloat(x: Float): float {
    return FloatUtil.constructorFloat.getfloat(x);
  }


  public static dependencies(): Set<Class> {
    return new Set([
      Core, Library,
    ]);
  }
}


// *** imports come at end to avoid circular dependency ***

// interface/type imports
import {float} from "../interfacesAndTypes/float";
//import {Float} from "./Float";
import {Class} from "../interfacesAndTypes/Class";


// functional imports
import {Core as CoreAlias} from "../core/Core";
const Core = CoreAlias;

import {Library as LibraryAlias} from "../core/Library";
const Library = LibraryAlias;