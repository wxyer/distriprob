"use strict";

/**
 * (C) Copyright Hubert Holin 2001.
 * (C) Copyright John Maddock 2008.
 * (C) Copyright Zachary Martin 2018 (port to javascript).
 * Use, modification and distribution are subject to the
 * Boost Software License:
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */

import {float} from "../../interfaces/float";

import {C as CAlias} from "../../constants/C";
const C = CAlias;

import {Sign as SignAlias} from "../../basicFunctions/Sign";
const Sign = SignAlias;

import {Basic as BasicAlias} from "../../basicFunctions/Basic";
const Basic = BasicAlias;

import {Comparison as ComparisonAlias} from "../../basicFunctions/Comparison";
const Comparison = ComparisonAlias;

import {EPSILON as EPSILONAlias} from "../../constants/EPSILON";
const EPSILON = EPSILONAlias;

import {RATIO as RATIOAlias} from "../../constants/RATIO";
const RATIO = RATIOAlias;

import {Log as LogAlias} from "../../basicFunctions/Log";
const Log = LogAlias;

import {StringWriter as StringWriterAlias} from "../../core/StringWriter";
const StringWriter = StringWriterAlias;

import {P as PAlias} from "../../core/P";
const P = PAlias;
export type P = PAlias;


export class Atanh {

  public static imp(x: float, prec: P): float {
    if (Comparison.lt(x, C.F_NEG_1) || Comparison.gt(x, C.F_1)) {
      throw new Error(`atanh argument must be in range [-1, 1], got ${
        StringWriter.toStr(x)}`);
    }

    const absX = Sign.absF(x);

    if (Comparison.lt(x, Sign.negateF(EPSILON.oneMinusEPS(prec)))) {
      return C.F_POSITIVE_INFINITY;
    } else if (Comparison.gt(x, EPSILON.oneMinusEPS(prec))) {
      return C.F_POSITIVE_INFINITY;
    } else if (Comparison.gte(absX, EPSILON.fourthRoot(prec))) {
      if (Comparison.lt(absX, C.F_ONE_HALF)) {
        return Basic.multiplyFF(
          C.F_ONE_HALF,
          Basic.subtractFF(
            Log.onePlusF(x, prec),
            Log.onePlusF(Sign.negateF(x), prec),
            prec
          ),
          prec
        );
      } else {
        return Basic.multiplyFF(
          C.F_ONE_HALF,
          Log.f(Basic.divideFF(
            Basic.addFF(C.F_1, x, prec),
            Basic.subtractFF(C.F_1, x, prec),
            prec
          ), prec),
          prec
        );
      }
    } else {
      let result = x;

      if (Comparison.gte(absX, EPSILON.sqrt(prec))) {
        const x3 = Basic.multiplyFF(Basic.squareF(x, prec), x, prec);
        result = Basic.addFF(
          result,
          Basic.multiplyFF(x3, RATIO.value(1, 3, prec), prec),
          prec
        );
      }

      return result;
    }
  }
}

