"use strict";

/**
 * (C) Copyright John Maddock 2006.
 * (C) Copyright Zachary Martin 2018 (port to javascript).
 * Use, modification and distribution are subject to the
 * Boost Software License:
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */


export class Powm1 {
  public static className: string;

  public static init0(): void {
   Powm1.className = "Powm1";
  }

  public static ff(x: float, y: float, p: P): float {
    if (Comparison.isNaN(x) || Comparison.isNaN(y)) {
      throw new NaNError(
        Powm1.className,
        "ff",
        Comparison.isNaN(x) ? "x" : "y"
      );
    } else if (Comparison.isPositive(x)) {
      const z = Sign.absF(Basic.multiplyFF(y, Basic.decF(x, p), p));

      if (Comparison.lt(z, C.F_ONE_HALF)
        || Comparison.lt(Sign.absF(y), RATIO.value(1, 5, p))) {
        // We don't have any good/quick approximation for log(x) * y
        // so just try it and see:
        let l: float = Basic.multiplyFF(y, Log.f(x, p), p);

        if (Comparison.lt(l, C.F_ONE_HALF)) { return Exp.m1F(l, p); }

        // fall through....
      }
    } else {
      // y had better be an integer:
      if (!Conversion.isInteger(y)) {
        throw new DomainError(
          Powm1.className,
          "ff",
          {
            x: {value: x, expectedType: "float"},
            y: {value: y, expectedType: "float"}
          },
          `The domain of powm1 is not defined for negative bases with non-integral${""
          } exponents`
        );
      }

      if (Parity.isEven(y)) {
        return Powm1.ff(Sign.negateF(x), y, p);
      }

    }

    return Basic.decF(Power.ff(x, y, p), p);
  }


  // class dependencies
  public static dependencies(): Set<Class> {
    return new Set([
      C, Sign, Parity, Comparison, Basic, Conversion, Power, Log, Exp, RATIO, NaNError,
      DomainError,
    ]);
  }
}


// *** imports come at end to avoid circular dependency ***

// interface/type imports
import {float} from "../../interfaces/float";
import {Class} from "../../interfaces/Class";

import {P as PAlias} from "../../dataTypes/P";
export type P = PAlias;


// functional imports
import {C as CAlias} from "../../constants/C";
const C = CAlias;

import {Sign as SignAlias} from "../../basicFunctions/Sign";
const Sign = SignAlias;

import {Parity as ParityAlias} from "../../basicFunctions/Parity";
const Parity = ParityAlias;

import {Comparison as ComparisonAlias} from "../../basicFunctions/Comparison";
const Comparison = ComparisonAlias;

import {Basic as BasicAlias} from "../../basicFunctions/Basic";
const Basic = BasicAlias;

import {Conversion as ConversionAlias} from "../../core/Conversion";
const Conversion = ConversionAlias;

import {Power as PowerAlias} from "../../basicFunctions/Power";
const Power = PowerAlias;

import {Log as LogAlias} from "../../basicFunctions/Log";
const Log = LogAlias;

import {Exp as ExpAlias} from "../../basicFunctions/Exp";
const Exp = ExpAlias;

import {RATIO as RATIOAlias} from "../../constants/RATIO";
const RATIO = RATIOAlias;

import {NaNError as NaNErrorAlias} from "../../errors/NaNError";
const NaNError = NaNErrorAlias;

import {DomainError as DomainErrorAlias} from "../../errors/DomainError";
const DomainError = DomainErrorAlias;

