"use strict";

/**
 * (C) Copyright Eric Ford & Hubert Holin 2001.
 * (C) Copyright John Maddock 2008.
 * (C) Copyright Zachary Martin 2018 (port to javascript).
 * Use, modification and distribution are subject to the
 * Boost Software License:
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */

import {float} from "../../interfaces/float";

import {C as CAlias} from "../../constants/C";
const C = CAlias;

import {Basic as BasicAlias} from "../../basicFunctions/Basic";
const Basic = BasicAlias;

import {Comparison as ComparisonAlias} from "../../basicFunctions/Comparison";
const Comparison = ComparisonAlias;

import {WHOLE as WHOLEAlias} from "../../constants/WHOLE";
const WHOLE = WHOLEAlias;

import {RATIO as RATIOAlias} from "../../constants/RATIO";
const RATIO = RATIOAlias;

import {StringWriter as StringWriterAlias} from "../../core/StringWriter";
const StringWriter = StringWriterAlias;

import {P as PAlias} from "../../core/P";
const P = PAlias;
export type P = PAlias;

export class Acosh {

  public static imp(x: float, prec: P): float {
    if (Comparison.lt(x, C.F_1)) {
      throw new Error(`acosh function requires argument >= 1, got: ${
        StringWriter.toScientificNotation(x)}`);
    }

    const y = Basic.subtractFF(x, C.F_1, prec);

    if (Comparison.gte(y, prec.epsilon)) {
      if (Comparison.gt(x, Acosh.EMD.C.ONE_DIV_ROOT_EPSILON)) {
        // approximation by laurent series in 1/x at 0+ order from -1 to 0
        return  Acosh.EMD.addVV(Acosh.EMD.logV(x), Acosh.EMD.C.LN2);
      } else if (Acosh.EMD.ltVV(x, Acosh.EMD.C.THREE_HALVES)) {
        // This is just a rearrangement of the standard form below
        // devised to minimse loss of precision when x ~ 1:
        // return log1p(y + sqrt(y * y + 2 * y))
        return Acosh.EMD.log1pV(Acosh.EMD.addVV(y, Acosh.EMD.sqrtV(
          Acosh.EMD.addVV(Acosh.EMD.squareV(y), Acosh.EMD.mulVV(Acosh.EMD.TWO, y))
        )));
      } else {
        // return log( x + sqrt(x * x - 1) )

        return Acosh.EMD.logV(Acosh.EMD.addVV(
          x,
          Acosh.EMD.sqrtV(Acosh.EMD.subtractVV(Acosh.EMD.squareV(x), Acosh.EMD.ONE))
        ));
      }
    } else {
      // approximation by taylor series in y at 0 up to order 2
      // return sqrt(2 * y) * (1 - y /12 + 3 * y * y / 160)
      const sqrt2y = Acosh.EMD.sqrtV(Acosh.EMD.mulVV(Acosh.EMD.TWO, y));
      const yDiv12 = Acosh.EMD.divVV(y, Acosh.EMD.C.I_12);
      const threeYSquaredDiv160 = Acosh.EMD.divVV(
        Acosh.EMD.mulVV(Acosh.EMD.C.THREE, Acosh.EMD.squareV(y)),
        Acosh.EMD160
      );
      const b = Acosh.EMD.subtractVV(Acosh.EMD.ONE, yDiv12);
      const c = Acosh.EMD.addVV(b, threeYSquaredDiv160);
      return Acosh.EMD.mulVV(sqrt2y, c);
    }
  }
}

