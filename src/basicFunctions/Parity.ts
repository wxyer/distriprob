"use strict";

/**
 * (C) Copyright Zachary Martin 2018.
 * Use, modification and distribution are subject to the
 * Boost Software License:
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */


export class Parity {
  public static className: string;

  public static init0(): void {
    Parity.className = "Parity";
  }

  public static isEvenI(a: int): boolean {
    if (Comparison.isFiniteI(a)) {
      return (a.digits[a.digits.length - 1] & 1) === 0;
    } else {
      return false;
    }
  }

  public static isEven(x: float): boolean {
    if (Comparison.isFinite(x)) {
      const leastSigDigPlace = Basic.leastSigDigPlaceF(x);

      if (Comparison.isPositiveI(leastSigDigPlace)) {
        return true;
      } else if (Comparison.isZeroI(leastSigDigPlace)) {
        return (x.coef.digits[x.coef.digits.length - 1] & 1) === 0;
      } else {
        return false; // x is not an integer
      }
    } else {
      return false;
    }
  }

  public static isOddI(a: int): boolean {
    if (Comparison.isFiniteI(a)) {
      return (a.digits[a.digits.length - 1] & 1) === 1;
    } else {
      return false;
    }
  }

  public static isOdd(x: float): boolean {
    if (Comparison.isFinite(x)) {
      const leastSigDigPlace = Basic.leastSigDigPlaceF(x);

      if (Comparison.isPositiveI(leastSigDigPlace)) {
        return false;
      } else if (Comparison.isZeroI(leastSigDigPlace)) {
        return (x.coef.digits[x.coef.digits.length - 1] & 1) === 1;
      } else {
        return false; // x is not an integer
      }
    } else {
      return false;
    }
  }

  // class dependencies
  public static dependencies(): Set<Class> {
    return new Set([
      Comparison, Basic,
    ]);
  }
}


// *** imports come at end to avoid circular dependency ***

// interface/type imports
import {int} from "../interfacesAndTypes/int";
import {float} from "../interfacesAndTypes/float";
import {Class} from "../interfacesAndTypes/Class";


// functional imports
import {Comparison as ComparisonAlias} from "./Comparison";
const Comparison = ComparisonAlias;

import {Basic as BasicAlias} from "./Basic";
const Basic = BasicAlias;

