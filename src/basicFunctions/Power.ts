"use strict";

/**
 * (C) Copyright Zachary Martin 2018.
 * Use, modification and distribution are subject to the
 * Boost Software License:
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */

import {float} from "../interfaces/float";

import {Sign as SignAlias} from "./Sign";
const Sign = SignAlias;

import {Parity as ParityAlias} from "./Parity";
const Parity = ParityAlias;

import {C as CAlias} from "../constants/C";
const C = CAlias;

import {Core as CoreAlias} from "../core/Core";
const Core = CoreAlias;

import {Comparison as ComparisonAlias} from "./Comparison";
const Comparison = ComparisonAlias;

import {Conversion as ConversionAlias} from "../core/Conversion";
const Conversion = ConversionAlias;

import {Basic as BasicAlias} from "./Basic";
const Basic = BasicAlias;

import {Exp as ExpAlias} from "./Exp";
const Exp = ExpAlias;

import {LN2 as LN2Alias} from "../constants/LN2";
const LN2 = LN2Alias;

import {Pow as PowAlias} from "./Pow";
const Pow = PowAlias;

import {Log as LogAlias} from "./Log";
const Log = LogAlias;

import {P as PAlias} from "../core/P";
const P = PAlias;
export type P = PAlias;


export class Power {
  public static ff(base: float, exponent: float, prec: P): float {
    if (Comparison.isNaN(base) || Comparison.isNaN(exponent)) { return C.F_NaN; }

    const absExponent = Sign.absF(exponent);
    const absBase = Sign.absF(base);

    if (Comparison.isZero(exponent) || Comparison.isOne(base)) {
      return C.F_1;
    } else if (Comparison.isZero(base)) {
      return C.F_0;
    } else if (Conversion.isInteger(exponent)) {
      if (Comparison.gt(absExponent, C.F_NUMBER_MAX_SAFE_INTEGER)) {
        const absResult = Power.usingLogAndExpFF(absBase, exponent, prec);

        return Comparison.isNegative(base) && Parity.isOdd(exponent) ?
          Sign.negateF(absResult)
          :
          absResult;
      } else {
        return Pow.fi(base, Conversion.floatToInt(exponent), prec)
      }
    } else {
      if (Comparison.isNegative(base)) {
        throw new Error(`Cannot raise negative value to non-integer power`);
      }

      return Power.usingLogAndExpFF(base, exponent, prec);
    }
  }


  /**
   * This function calculates powers based on the following observations:
   *    1. we can get coef and e such that:
   *                          base = coef * 2^e
   *    2. base^exponent = exp(exponent * log(base))
   *
   * therefore using 1 and 2 we get:
   *
   * base^exponent = exp(exponent * log(base))
   *               = exp(exponent * (log(coef) + log(2^e)))
   *               = exp(exponent * (log(coef) + (e * ln2)))
   *
   */
  private static usingLogAndExpFF(base: float, exponent: float, prec: P): float {
    const calcPrec = P.createRelativeP(P.p, exponent.coef.digits.length);
    const coef = Conversion.intToFloat(base.coef, calcPrec, true);
    const e = Conversion.intToFloat(
      Basic.multiplyII(
        C.POWER_OF_TWO_FOR_BASE_INT,
        Basic.subtractII(
          base.exp,
          Core.numberToIntUnchecked(base.coef.digits.length - 1)
        )
      ),
      calcPrec,
      true
    );
    const logCoef = Log.f(coef, calcPrec);
    const logBase = Basic.addFF(
      logCoef,
      Basic.multiplyFF(e, LN2.value(calcPrec), calcPrec),
      calcPrec
    );

    return Exp.f(Basic.multiplyFF(exponent, logBase, calcPrec), calcPrec);
  }


}

