"use strict";

/**
 * (C) Copyright Zachary Martin 2018.
 * Use, modification and distribution are subject to the
 * Boost Software License:
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */


export class Power {
  public static className: string;

  public static init0(): void {
    Power.className = "Power";
  }

  public static ff(base: float, exponent: float, p: P): float {
    const baseIsFinite = Comparison.isFinite(base);
    const expIsFinite = Comparison.isFinite(exponent);
    const absExponent = Sign.absF(exponent);
    const absBase = Sign.absF(base);

    if (baseIsFinite && expIsFinite) {
      if (Comparison.isZero(exponent) || Comparison.isOne(base)) {
        return C.F_1;
      } else if (Comparison.isZero(base)) {
        return C.F_0;
      } else if (Conversion.isInteger(exponent)) {
        if (Comparison.gt(absExponent, C.F_NUMBER_MAX_SAFE_INTEGER)) {
          const absResult = Power.usingLogAndExpFF(absBase, exponent, p);

          return Comparison.isNegative(base) && Parity.isOdd(exponent) ?
            Sign.negateF(absResult)
            :
            absResult;
        } else {
          return Pow.fi(base, Conversion.floatToInt(exponent), p)
        }
      } else {
        if (Comparison.isNegative(base)) {
          throw new DomainError(
            Power.className,
            "ff",
            {
              base: {value: base, expectedType: "float"},
              exponent: {value: exponent, expectedType: "float"}
            },
            `The power function is undefined for a negative real value raised to a${""
            } non-integer real value`
          );
        }

        return Power.usingLogAndExpFF(base, exponent, p);
      }
    } else if (Comparison.isNaN(base) || Comparison.isNaN(exponent)) {
      throw new NaNError(
        Power.className,
        "ff",
        Comparison.isNaN(base) ? "base" : "exponent"
      )
    } else if (baseIsFinite) { // exponent is +/- infinity and base is finite
      if (Comparison.isPOSITIVE_INFINITY(exponent)) {
        if (Comparison.ltOne(absBase)) {
          return C.F_0;
        } else if (Comparison.isOne(base)) {
          return C.F_1;
        } else if (Comparison.gtOne(base)) {
          return C.F_POSITIVE_INFINITY;
        } else { // base <= -1
          throw new DomainError(
            Power.className,
            "ff",
            {
              base: {value: base, expectedType: "float"},
              exponent: {value: exponent, expectedType: "float"}
            },
            `The power function is undefined for a negative value less than or equal${""
            } to -1 raised to +Infinity`
          );
        }
      } else { // exponent === NEGATIVE_INFINITY
        if (Comparison.gtOne(absBase)) {
          return C.F_0;
        } else if (Comparison.isOne(base)) {
          return C.F_1;
        } else if (Comparison.isNegative(base)) { // 0 > base >= -1
          throw new DomainError(
            Power.className,
            "ff",
            {
              base: {value: base, expectedType: "float"},
              exponent: {value: exponent, expectedType: "float"}
            },
            `The power function is undefined for a negative value greater than or${""
            } equal to -1 raised to -Infinity`
          );
        } else { // 0 <= base < 1
          return C.F_POSITIVE_INFINITY
        }
      }
    } else if (expIsFinite) { // base is +/- infinity and exponent is finite
      if (Comparison.isPositive(exponent)) {
        if (Comparison.isPOSITIVE_INFINITY(base)) {
          return C.F_POSITIVE_INFINITY;
        } else { // base is NEGATIVE_INFINITY
          if (Conversion.isInteger(exponent)) {
            if (Parity.isEven(exponent)) {
              return C.F_POSITIVE_INFINITY;
            } else { // exponent is odd integer
              return C.F_NEGATIVE_INFINITY;
            }
          } else {
            throw new DomainError(
              Power.className,
              "ff",
              {
                base: {value: base, expectedType: "float"},
                exponent: {value: exponent, expectedType: "float"}
              },
              `The power function is undefined for -Infinity raised to a${""
              } positive non-integer`
            );
          }
        }
      } else if (Comparison.isNegative(exponent)) {
        return C.F_0;
      } else { // exponent === 0
        throw new DomainError(
          Power.className,
          "ff",
          {
            base: {value: base, expectedType: "float"},
            exponent: {value: exponent, expectedType: "float"}
          },
          "The power function is undefined for 0 base and infinite exponent"
        );
      }
    } else { // both base and exponent are +/- infinity
      if (Comparison.isPOSITIVE_INFINITY(base)) {
        if (Comparison.isPOSITIVE_INFINITY(exponent)) {
          return C.F_POSITIVE_INFINITY;
        } else { // exponent === NEGATIVE_INFINITY
          return C.F_0;
        }
      } else {
        if (Comparison.isPOSITIVE_INFINITY(exponent)) {
          throw new DomainError(
            Power.className,
            "ff",
            {
              base: {value: base, expectedType: "float"},
              exponent: {value: exponent, expectedType: "float"}
            },
            "The power function is undefined for -Infinity raised to +Infinity"
          );
        } else { // exponent === NEGATIVE_INFINITY
          return C.F_0;
        }
      }
    }
  }



  /**
   * This function calculates powers based on the following observations:
   *    1. we can get coef and e such that:
   *                          base = coef * 2^e
   *    2. base^exponent = exp(exponent * log(base))
   *
   * therefore using 1 and 2 we get:
   *
   * base^exponent = exp(exponent * log(base))
   *               = exp(exponent * (log(coef) + log(2^e)))
   *               = exp(exponent * (log(coef) + (e * ln2)))
   *
   */
  private static usingLogAndExpFF(base: float, exponent: float, p: P): float {
    const calcPrec = PREC.getRelativeP(p, exponent.coef.digits.length);
    const coef = Conversion.intToFloat(base.coef, calcPrec, true);
    const e = Conversion.intToFloat(
      Basic.multiplyII(
        C.POWER_OF_TWO_FOR_BASE_INT,
        Basic.subtractII(
          base.exp,
          Core.numberToIntUnchecked(base.coef.digits.length - 1)
        )
      ),
      calcPrec,
      true
    );
    const logCoef = Log.f(coef, calcPrec);
    const logBase = Basic.addFF(
      logCoef,
      Basic.multiplyFF(e, LN2.value(calcPrec), calcPrec),
      calcPrec
    );

    return Exp.f(Basic.multiplyFF(exponent, logBase, calcPrec), calcPrec);
  }


  // class dependencies
  public static dependencies(): Set<Class> {
    return new Set([
      Sign, Parity, C, Core, Comparison, Conversion, Basic, Exp, LN2, Pow, Log, NaNError,
      DomainError, PREC,
    ]);
  }
}


// *** imports come at end to avoid circular dependency ***

// interface/type imports
import {float} from "../interfaces/float";
import {Class} from "../interfaces/Class";

import {P as PAlias} from "../dataTypes/P";
export type P = PAlias;


// functional imports
import {Sign as SignAlias} from "./Sign";
const Sign = SignAlias;

import {Parity as ParityAlias} from "./Parity";
const Parity = ParityAlias;

import {C as CAlias} from "../constants/C";
const C = CAlias;

import {Core as CoreAlias} from "../core/Core";
const Core = CoreAlias;

import {Comparison as ComparisonAlias} from "./Comparison";
const Comparison = ComparisonAlias;

import {Conversion as ConversionAlias} from "../core/Conversion";
const Conversion = ConversionAlias;

import {Basic as BasicAlias} from "./Basic";
const Basic = BasicAlias;

import {Exp as ExpAlias} from "./Exp";
const Exp = ExpAlias;

import {LN2 as LN2Alias} from "../constants/LN2";
const LN2 = LN2Alias;

import {Pow as PowAlias} from "./Pow";
const Pow = PowAlias;

import {Log as LogAlias} from "./Log";
const Log = LogAlias;

import {NaNError as NaNErrorAlias} from "../errors/NaNError";
const NaNError = NaNErrorAlias;

import {DomainError as DomainErrorAlias} from "../errors/DomainError";
const DomainError = DomainErrorAlias;

import {PREC as PRECAlias} from "../constants/PREC";
const PREC = PRECAlias;