"use strict";

/**
 * (C) Copyright Zachary Martin 2018.
 * Use, modification and distribution are subject to the
 * Boost Software License:
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */

import {float} from "../interfaces/float";

import {C as CAlias} from "../constants/C";
const C = CAlias;

import {Sign as SignAlias} from "./Sign";
const Sign = SignAlias;

import {Comparison as ComparisonAlias} from "./Comparison";
const Comparison = ComparisonAlias;

import {Basic as BasicAlias} from "./Basic";
const Basic = BasicAlias;

import {P as PAlias} from "../core/P";
const P = PAlias;
export type P = PAlias;


export class Diff {
  public static absoluteFF(x: float, y: float, prec: P): float {
    return Sign.absF(Basic.subtractFF(x, y, prec));
  }

  public static relativeFF(x: float, y: float, prec: P): float {
    const xIsZero = Comparison.isZero(x);
    const yIsZero = Comparison.isZero(y);

    if (xIsZero || yIsZero) {
      if (xIsZero && yIsZero) {
        return C.F_0;
      } else {
        return C.F_1;
      }
    } else if ((Comparison.isPOSITIVE_INFINITY(x)
      && Comparison.isPOSITIVE_INFINITY(y))
      || (Comparison.isNEGATIVE_INFINITY(x)
        && Comparison.isNEGATIVE_INFINITY(y))) {
      return C.F_0;
    } else if (Comparison.isNaN(x) || Comparison.isNaN(y)) {
      return C.F_1;
    } else {
      const absDiff = Diff.absoluteFF(x, y, prec);
      const re1 = Basic.divideFF(absDiff, Sign.absF(x), prec);
      const re2 = Basic.divideFF(absDiff, Sign.absF(y), prec);
      return Comparison.gt(re1, re2) ? re1 : re2;
    }
  }


  public static relInEpsVV(x: float, y: float, prec: P): float {
    return Basic.divideFF(
      Diff.relativeFF(x, y, prec),
      prec.epsilon,
      prec
    );
  }

}

