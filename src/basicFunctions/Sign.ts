"use strict";

/**
 * (C) Copyright Zachary Martin 2018.
 * Use, modification and distribution are subject to the
 * Boost Software License:
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */


export class Sign {
  public static className: string;

  public static init0(): void {
    Sign.className = "Sign";
  }

  public static negateI(a: int): int {
    if (a.type === intType.finite) {
      if (a.digits.length === 1 && a[0] === 0) {
        return C.I_0;
      }

      return new Integer(!a.neg, a.digits);
    } else if (a.type === intType.infinite) {
      return a.neg ? C.POSITIVE_INFINITY : C.NEGATIVE_INFINITY;
    } else { // a === NaN
      throw new NaNError(Sign.className, "negateI", "a");
    }
  }

  public static absI(a: int): int {
    return a.neg ? new Integer(false, a.digits) : a;
  }

  public static i(a: int): number {
    if (a.type === intType.finite) {
      return a.digits.length === 1 && a.digits[0] === 0 ? 0 : a.neg ? -1 : 1;
    } else if (a.type === intType.infinite) {
      return a.neg ? -1 : 1;
    } else { // a === NaN
      throw new NaNError(Sign.className, "i", "a");
    }
  }

  public static negateF(x: float): float {
    if (x.coef.type === intType.NaN && x.exp.type === intType.NaN) {
      throw new NaNError(Sign.className, "negateF", "x");
    } else {
      return new FloatingPoint(Sign.negateI(x.coef), x.exp);
    }
  }

  public static absF(x: float): float {
    if (x.coef.type === intType.finite) {
      return x.coef.neg ?
        new FloatingPoint(new Integer(false, x.coef.digits), x.exp)
        :
        x;
    } else if (x.coef.type === intType.infinite) {
      return C.F_POSITIVE_INFINITY;
    } else {
      return C.F_NaN;
    }
  }

  public static f(x: float): number {
    if (x.coef.type === intType.finite) {
      return x.coef.digits.length === 1 && x.coef.digits[0] === 0 ?
        0
        :
        x.coef.neg ? -1 : 1;
    } else if (x.coef.type === intType.infinite) {
      return x.coef.neg ? -1 : 1;
    } else {
      throw new NaNError(Sign.className, "f", "x");
    }
  }


  // class dependencies
  public static dependencies(): Set<Class> {
    return new Set([
      C, Integer, FloatingPoint, NaNError,
    ]);
  }
}


// *** imports come at end to avoid circular dependency ***

// interface imports
import {int, intType} from "../interfacesAndTypes/int";
import {float} from "../interfacesAndTypes/float";
import {Class} from "../interfacesAndTypes/Class";


// functional imports
import {C as CAlias} from "../constants/C";
const C = CAlias;

import {Integer as IntegerAlias} from "../dataTypes/Integer";
const Integer = IntegerAlias;

import {FloatingPoint as FloatingPointAlias} from "../dataTypes/FloatingPoint";
const FloatingPoint = FloatingPointAlias;

import {NaNError as NaNErrorAlias} from "../errors/NaNError";
const NaNError = NaNErrorAlias;