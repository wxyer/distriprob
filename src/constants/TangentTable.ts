"use strict";

/**
 * (C) Copyright Zachary Martin 2018.
 * Use, modification and distribution are subject to the
 * Boost Software License:
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */


export class TangentTable {
  public static maxIndex: number;
  private static _Uint32ArrayTable: Array<Uint32Array>;
  private static _intTable: {[n: number]: int};
  private static _fltTable: {[n: number]: float};

  public init0(): void {
    TangentTable.maxIndex = Math.min(FactorialTable.maxIndex + 1, 500);
    TangentTable._intTable = {};
    TangentTable._fltTable = {};
  }

  public static setup(): void {
    const digitTable: Array<Uint32Array> = Array(TangentTable.maxIndex).fill(C.ARR_0);

    for (let i = 0; i < TangentTable.maxIndex; i++) {
      digitTable[i] = FactorialTable.uint32(i);
    }

    for (let k = 1; k < TangentTable.maxIndex; k++){
      for (let j = k; j < TangentTable.maxIndex; j++) {
        digitTable[j] = Longhand.addition(
          Longhand.multiplication(Uint32Array.of(j - k), digitTable[j-1]),
          Longhand.multiplication(Uint32Array.of(j - k + 2), digitTable[j])
        );
      }
    }

    TangentTable._Uint32ArrayTable = digitTable;
  }

  public static uint32(n: number): Uint32Array {
    if (!TangentTable._Uint32ArrayTable) { TangentTable.setup(); }

    return TangentTable._Uint32ArrayTable[n - 1];
  }

  public static int(n: number): int {
    if (typeof TangentTable._intTable[n] === "undefined") {
      TangentTable._intTable[n] = new Integer(
        false,
        TangentTable.uint32(n)
      );
    }

    return TangentTable._intTable[n];
  }

  public static float(n: number): float {
    if (typeof TangentTable._fltTable[n] === "undefined") {
      TangentTable._fltTable[n] = Conversion.intToFloatFullPrecision(
        TangentTable.int(n),
        true
      );
    }

    return TangentTable._fltTable[n];
  }
}


// *** imports come at end to avoid circular dependency ***

import {float} from "../interfaces/float";
import {int} from "../interfaces/int";

import {Integer as IntegerAlias} from "../dataTypes/Integer";
const Integer = IntegerAlias;

import {C as CAlias} from "./C";
const C = CAlias;

import {Longhand as LonghandAlias} from "../core/Longhand";
const Longhand = LonghandAlias;

import {Conversion as ConversionAlias} from "../core/Conversion";
const Conversion = ConversionAlias;

import {FactorialTable as FactorialTableAlias} from "./FactorialTable";
const FactorialTable = FactorialTableAlias;

import {P as PAlias} from "../dataTypes/P";
export type P = PAlias;

