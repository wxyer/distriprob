"use strict";

/**
 * (C) Copyright Zachary Martin 2018.
 * Use, modification and distribution are subject to the
 * Boost Software License:
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */


type Entry = {
  sqrtEPS: float,
  cbrtEPS: float,
  fourthRootEPS: float,
  truncLogEPSDiv2: float,
  reciprocalSqrtEPS: float,
  oneMinusEPS: float,
  minSafeInt: float,
  p: P
};


export class PREC {
  private static className: string;
  private static _baseTable: {[baseDigits: number]: Entry};
  private static _binTable: {[binDigits: number]: Entry};
  private static _decTable: {[decDigits: number]: Entry};

  public static init0(): void {
    PREC.className = "PREC";
    PREC._baseTable = {};
    PREC._binTable = {};
    PREC._decTable = {};
  }

  private static createEntry(prec: P): Entry {
    const eps = prec.epsilon;
    const sqrtEps = Root.squareF(eps, prec);
    const entry: Entry = {
      sqrtEPS: sqrtEps,
      cbrtEPS: Root.fn(eps, 3, prec),
      fourthRootEPS: Root.fn(eps, 4, prec),
      truncLogEPSDiv2: Conversion.trunc(Basic.divideFF(
        Log.f(eps, prec),
        C.F_NEG_2,
        prec
      )),
      reciprocalSqrtEPS: Basic.reciprocalF(sqrtEps, prec),
      oneMinusEPS: Basic.subtractFF(C.F_1, eps, prec),
      minSafeInt: Sign.negateF(prec.maxSafeInt),
      p: prec
    };

    if (prec.type === "base") {
      PREC._baseTable[prec.baseDigits] = entry;
    } else if (prec.type === "bin") {
      PREC._binTable[prec.binDigits] = entry;
    } else if (prec.type === "dec") {
      PREC._decTable[prec.decDigits] = entry;
    } else {
      PREC.throwBadPTypeDomainError("createEntry", prec);
    }

    return entry;
  }

  private static getEntry(prec: P): Entry {
    let entry: Entry | undefined;

    if (prec.type === "base") {
      entry = PREC._baseTable[prec.baseDigits];
    } else if (prec.type === "bin") {
      entry = PREC._binTable[prec.binDigits];
    } else if (prec.type === "dec") {
      entry = PREC._decTable[prec.decDigits];
    } else {
      PREC.throwBadPTypeDomainError("getEntry", prec);
    }

    if (typeof entry === "undefined") { entry = PREC.createEntry(prec);}

    return entry;
  }

  public static eps(prec: P): float { return prec.epsilon; }

  public static sqrtEPS(prec: P): float { return PREC.getEntry(prec).sqrtEPS; }

  public static cbrtEPS(prec: P): float { return PREC.getEntry(prec).cbrtEPS; }

  public static fourthRootEPS(prec: P): float {
    return PREC.getEntry(prec).fourthRootEPS;
  }

  public static truncLogEPSDiv2(prec: P): float {
    return PREC.getEntry(prec).truncLogEPSDiv2;
  }

  public static reciprocalSqrtEPS(prec: P): float {
    return PREC.getEntry(prec).reciprocalSqrtEPS;
  }

  public static oneMinusEPS(prec: P): float {
    return PREC.getEntry(prec).oneMinusEPS;
  }

  public static maxSafeInteger(prec: P): float {
    return prec.maxSafeInt;
  }

  public static minSafeInteger(prec: P): float {
    return PREC.getEntry(prec).minSafeInt;
  }

  public static  getPFromBaseDigits(baseDigits: number): P {
    let entry: Entry | undefined = PREC._baseTable[baseDigits + 1];

    if (typeof entry === "undefined") {
      const p = new P(baseDigits, "base");
      entry = PREC.createEntry(p);
    }

    return entry.p;
  }

  public static getPFromBinaryDigits(binaryDigits: number): P {
    let entry: Entry | undefined = PREC._binTable[binaryDigits];

    if (typeof entry === "undefined") {
      const p = new P(binaryDigits, "bin");
      entry = PREC.createEntry(p);
    }

    return entry.p;
  }

  public static getPFromDecimalDigits(decimalDigits: number): P {
    let entry: Entry | undefined = PREC._decTable[decimalDigits];

    if (typeof entry === "undefined") {
      const p = new P(decimalDigits, "bin");
      entry = PREC.createEntry(p);
    }

    return entry.p;
  }

  public static getRelativeP(prec: P, relativeBaseDigits: number): P {
    return PREC.getPFromBaseDigits(prec.baseDigits - 1 + relativeBaseDigits);
  }

  public static calcDisplayEpsilon(prec: P): float {
    if (prec.type === "base") {
      return prec.epsilon;
    } else if (prec.type === "bin") {
      return Pow.fi(C.F_2, Core.numberToIntUnchecked(-prec.binDigits), prec);
    } else if (prec.type === "dec") {
      return Pow.fi(C.F_10, Core.numberToIntUnchecked(-prec.decDigits), prec);
    } else {
      return PREC.throwBadPTypeDomainError("calcEpsilon", prec);
    }
  }

  private static calcDisplayMaxSafeInteger(prec: P): float {
    if (prec.type === "base") {
      return prec.maxSafeInt;
    } else if (prec.type === "bin") {
      return Basic.subtractFF(
        Pow.fi(C.F_2, Core.numberToIntUnchecked(prec.binDigits), prec),
        C.F_1,
        prec
      );
    } else if (prec.type === "dec") {
      return Basic.subtractFF(
        Pow.fi(C.F_10, Core.numberToIntUnchecked(prec.decDigits), prec),
        C.F_1,
        prec
      );
    } else {
      return PREC.throwBadPTypeDomainError("calcMaxSafeInteger", prec);
    }
  }

  private static throwBadPTypeDomainError(functionName: string, prec: P): float {
    throw new DomainError(
      PREC.className,
      functionName,
      "prec",
      "P",
      prec,
      `P object prec poorly formed, whose type property should be "base", ${""
        }"bin", or "dec", given prec.type = ${(<string>prec.type).toString()}`
    );
    return C.F_NaN;
  }
}


// *** imports come at end to avoid circular dependency ***

import {int} from "../interfaces/int";
import {float} from "../interfaces/float";

import {FloatingPoint as FloatAlias} from "../dataTypes/FloatingPoint";
const Float = FloatAlias;

import {Integer as IntegerAlias} from "../dataTypes/Integer";
const Integer = IntegerAlias;

import {C as CAlias} from "./C";
const C = CAlias;

import {Sign as SignAlias} from "../basicFunctions/Sign";
const Sign = SignAlias;

import {Core as CoreAlias} from "../core/Core";
const Core = CoreAlias;

import {Basic as BasicAlias} from "../basicFunctions/Basic";
const Basic = BasicAlias;

import {Conversion as ConversionAlias} from "../core/Conversion";
const Conversion = ConversionAlias;

import {Pow as PowAlias} from "../basicFunctions/Pow";
const Pow = PowAlias;

import {Root as RootAlias} from "../basicFunctions/Root";
const Root = RootAlias;

import {Log as LogAlias} from "../basicFunctions/Log";
const Log = LogAlias;

import {DomainError as DomainErrorAlias} from "../errors/DomainError";
const DomainError = DomainErrorAlias;

import {P as PAlias} from "../dataTypes/P";
const P = PAlias;
export type P = PAlias;




// export class POld {
//   public static p: P;
//
//   public readonly numDigits: number;
//   public readonly numDigitsInt: int;
//   public readonly binaryDigits: number;
//   public readonly decimalDigits: number;
//   public readonly quadraticConvergenceSteps: number;
//   public readonly epsilon: float;
//   public readonly maxSafeInt: float;
//
//   constructor(numDoubles: number, binaryDigits: number, decimalDigits: number) {
//     const numDoublesMinus1 = numDoubles - 1;
//     this.numDigits = numDoubles;
//     this.numDigitsInt = Core.numberToInt(numDoubles);
//     this.binaryDigits = binaryDigits;
//     this.decimalDigits = decimalDigits;
//     this.quadraticConvergenceSteps = P.quadraticConvergenceSteps(numDoublesMinus1);
//     this.epsilon = P.epsilonFromNumDubs(numDoublesMinus1);
//     this.maxSafeInt = P.maxSafeInteger(numDoublesMinus1);
//   }
//
//   public static setDecimalDigits(digits: number): void {
//     P.changeP(P.createPFromDecimalDigits(digits));
//   }
//
//   public static setBinaryDigits(digits: number): void {
//     P.changeP(P.createPFromBinaryDigits(digits));
//   }
//
//   public static setNumDigits(numDigits: number): void {
//     P.changeP(P.createPFromNumDigits(numDigits));
//   }
//
//   public static createPFromDecimalDigits(decimalDigits: number): P {
//     const binaryDigits = Math.ceil(3.321928094887362 * decimalDigits);
//     const numDigits =
//       Math.ceil(binaryDigits / C.POWER_OF_TWO_FOR_BASE) + 1;
//
//     return new P(numDigits, binaryDigits, decimalDigits);
//   }
//
//   public static createPFromBinaryDigits(binaryDigits: number): P {
//     const decimalDigits = Math.floor(0.3010299956639812 * binaryDigits);
//     const numDigits = Math.ceil(binaryDigits / C.POWER_OF_TWO_FOR_BASE) + 1;
//
//     return new P(numDigits, binaryDigits, decimalDigits);
//   }
//
//   public static createPFromNumDigits(numDigits: number): P {
//     const binaryDigits = numDigits * C.POWER_OF_TWO_FOR_BASE;
//     const decimalDigits = Math.floor(0.3010299956639812 * binaryDigits);
//
//     return new P(numDigits + 1, binaryDigits, decimalDigits);
//   }
//
//   public static createRelativeP(p: P, relativeNumDigits: number): P {
//     return P.createPFromNumDigits(
//       p.numDigits - 1 + relativeNumDigits
//     );
//   }
//
//   private static changeP(newP: P): void {
//     P.p = newP;
//   }
//
//   private static quadraticConvergenceSteps(numDoubles: number): number {
//     return Math.ceil(Math.log2((numDoubles * C.POWER_OF_TWO_FOR_BASE + 1) / 50));
//   }
//
//   private static epsilonFromNumDubs(numDoubles: number): float {
//     return new Float(
//       C.I_2,
//       Core.numberToIntUnchecked(-numDoubles)
//     )
//   }
//
//   private static maxSafeInteger(numDigits: number): float {
//     return new Float(
//       new Integer(
//         false,
//         Uint32Array.from(Array(numDigits).fill(C.BASE_MINUS_ONE))
//       ),
//       Core.numberToIntUnchecked(numDigits - 1)
//     );
//   }
// }

