"use strict";

/**
 * (C) Copyright Zachary Martin 2018.
 * Use, modification and distribution are subject to the
 * Boost Software License:
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */

import {float} from "../interfaces/float";

import {C as CAlias} from "./C";
const C = CAlias;

import {Sign as SignAlias} from "../basicFunctions/Sign";
const Sign = SignAlias;

import {Core as CoreAlias} from "../core/Core";
const Core = CoreAlias;

import {Comparison as ComparisonAlias} from "../basicFunctions/Comparison";
const Comparison = ComparisonAlias;

import {Basic as BasicAlias} from "../basicFunctions/Basic";
const Basic = BasicAlias;

import {WHOLE as WHOLEAlias} from "./WHOLE";
const WHOLE = WHOLEAlias;

import {FactorialTable as FactorialTableAlias} from "./FactorialTable";
const FactorialTable = FactorialTableAlias;

import {P as PAlias} from "../dataTypes/P";
const P = PAlias;
export type P = PAlias;


export class CATALAN {
  private static _value: float;
  private static _numDigits: number;

  public static value(prec: P): float {
    if (typeof CATALAN._numDigits === "undefined" || CATALAN._numDigits < prec.numDigits){
      CATALAN._value = CATALAN.calculate(prec);
      CATALAN._numDigits = prec.numDigits;
    }

    return CATALAN._value;
  }

  private static calculate(prec: P): float {
    let negative = false;
    let twoTo8N = C.F_256;
    let p = WHOLE.float(19);
    let twoNFact = {value: C.F_2, index: 2, nextIndex: 4};
    let twoNFactCubed = C.F_8;
    let nFact = C.F_1;
    let nFactSquared = C.F_1;
    let nCubed = C.F_1;
    let twoNMinus1 = C.F_1;
    let fourNFact = {value: WHOLE.float(24), index: 4, nextIndex:8};
    let fourNFactSquared: float;
    let termNum = WHOLE.float(608);
    let termDenom = C.F_9;
    let sumNum = termNum;
    let sumDenom = termDenom;
    let sntd: float;
    let sdtn: float;
    let absEpsTimesSNTD: float;
    let keepGoing = true;
    let n = 1;
    let nFloat = C.F_1;

    while(keepGoing) {
      n++;
      negative = !negative;
      nFloat = Core.numberToFloatUnchecked(n);
      twoTo8N = Basic.multiplyFF(twoTo8N, C.F_256, prec);
      p = Core.numberToFloatUnchecked(40*(n**2) - 24*n + 3);

      twoNFact.nextIndex = 2 * n;
      FactorialTable.calcFact(twoNFact, prec);
      twoNFactCubed = Basic.multiplyFF(
        Basic.squareF(twoNFact.value, prec),
        twoNFact.value,
        prec
      );


      nFact = n <= FactorialTable.maxIndex ?
        FactorialTable.float(n)
        :
        Basic.multiplyFF(nFact, nFloat, prec);
      nFactSquared = Basic.squareF(nFact, prec);
      nCubed = Core.numberToFloatUnchecked(n * n * n);
      twoNMinus1 = Core.numberToFloatUnchecked((2 * n) - 1);

      fourNFact.nextIndex = 4 * n;
      FactorialTable.calcFact(fourNFact, prec);
      fourNFactSquared = Basic.squareF(fourNFact.value, prec);

      termNum = Basic.productF([twoTo8N, p, twoNFactCubed, nFactSquared], prec);
      termNum = negative ? Sign.negateF(termNum) : termNum;
      termDenom = Basic.productF([nCubed, twoNMinus1, fourNFactSquared], prec);

      sntd = Basic.multiplyFF(sumNum, termDenom, prec);
      sdtn = Basic.multiplyFF(sumDenom, termNum, prec);
      absEpsTimesSNTD = Sign.absF(Basic.multiplyFF(prec.epsilon, sntd, prec));

      if (Comparison.gte(absEpsTimesSNTD, Sign.absF(sdtn))) { keepGoing = false; }

      sumNum = Basic.addFF(sntd, sdtn, prec);
      sumDenom = Basic.multiplyFF(sumDenom, termDenom, prec);
    }

    return Basic.divideFF(sumNum, Basic.multiplyFF(C.F_64, sumDenom, prec), prec);
  }
}

