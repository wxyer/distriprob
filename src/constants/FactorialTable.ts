"use strict";

/**
 * (C) Copyright Zachary Martin 2018.
 * Use, modification and distribution are subject to the
 * Boost Software License:
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */


export class FactorialTable {
  public static className: string;
  public static maxIndex: number;
  public static _Uint32ArrayTable: {[n: number]: Uint32Array};
  private static _intTable: {[n: number]: int};
  private static _fltTable: {[n: number]: float};

  public static init0(): void {
    FactorialTable.className = "FactorialTable";
    FactorialTable.maxIndex = 1000;
    FactorialTable._Uint32ArrayTable = {};
    FactorialTable._intTable = {};
    FactorialTable._fltTable = {};
  }

  public static uint32(n: number): Uint32Array {
    if (typeof FactorialTable._Uint32ArrayTable[n] === "undefined") {
      if (n === 0 || n === 1) {
        FactorialTable._Uint32ArrayTable[n] = C.ARR_1;
      } else {
        FactorialTable._Uint32ArrayTable[n] = Longhand.multiplication(
          FactorialTable.uint32(n - 1),
          WHOLE.arr(n)
        );
      }
    }

    return FactorialTable._Uint32ArrayTable[n];
  }

  public static int(n: number): int {
    if (typeof FactorialTable._intTable[n] === "undefined") {
      FactorialTable._intTable[n] = new Integer(
        false,
        FactorialTable.uint32(n)
      );
    }

    return FactorialTable._intTable[n];
  }

  public static float(n: number): float {
    if (typeof FactorialTable._fltTable[n] === "undefined") {
      FactorialTable._fltTable[n] = Conversion.intToFloatFullPrecision(
        FactorialTable.int(n),
        true
      );
    }

    return FactorialTable._fltTable[n];
  }

  public static calcFact(
    factObj: {value: float, index: number, nextIndex: number},
    p: P
  ): void {
    if (factObj.nextIndex <= FactorialTable.maxIndex) {
      factObj.value = FactorialTable.float(factObj.nextIndex);
      factObj.index = factObj.nextIndex;
    } else {
      for(let i = factObj.index + 1; i <= factObj.nextIndex; i++) {
        factObj.value = Basic.multiplyFF(
          factObj.value,
          Core.numberToFloatUnchecked(i),
          p
        );
        factObj.index = factObj.nextIndex;
      }
    }
  }


  // class dependencies
  public static dependencies(): Set<Class> {
    return new Set([
      Integer, C, Core, Longhand, Basic, Conversion, WHOLE,
    ]);
  }
}


// *** imports come at end to avoid circular dependency ***

// interface/type imports
import {float} from "../interfaces/float";
import {int} from "../interfaces/int";
import {Class} from "../interfaces/Class";

import {P as PAlias} from "../dataTypes/P";
export type P = PAlias;


// functional imports
import {Integer as IntegerAlias} from "../dataTypes/Integer";
const Integer = IntegerAlias;

import {C as CAlias} from "./C";
const C = CAlias;

import {Core as CoreAlias} from "../core/Core";
const Core = CoreAlias;

import {Longhand as LonghandAlias} from "../core/Longhand";
const Longhand = LonghandAlias;

import {Basic as BasicAlias} from "../basicFunctions/Basic";
const Basic = BasicAlias;

import {Conversion as ConversionAlias} from "../core/Conversion";
const Conversion = ConversionAlias;

import {WHOLE as WHOLEAlias} from "./WHOLE";
const WHOLE = WHOLEAlias;
