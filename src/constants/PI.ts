"use strict";

/**
 * (C) Copyright Zachary Martin 2018.
 * Use, modification and distribution are subject to the
 * Boost Software License:
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */

import {float} from "../interfaces/float";
import {int} from "../interfaces/int";

import {C as CAlias} from "./C";
const C = CAlias;

import {Core as CoreAlias} from "../core/Core";
const Core = CoreAlias;

import {Basic as BasicAlias} from "../basicFunctions/Basic";
const Basic = BasicAlias;

import {Conversion as ConversionAlias} from "../core/Conversion";
const Conversion = ConversionAlias;

import {Pow as PowAlias} from "../basicFunctions/Pow";
const Pow = PowAlias;

import {Root as RootAlias} from "../basicFunctions/Root";
const Root = RootAlias;

import {WHOLE as WHOLEAlias} from "./WHOLE";
const WHOLE = WHOLEAlias;

import {RATIO as RATIOAlias} from "./RATIO";
const RATIO = RATIOAlias;

import {P as PAlias} from "../dataTypes/P";
const P = PAlias;
export type P = PAlias;

/**
 * The calculation of PI used here is an optimized version of the Chudnovsky algorithm,
 * as described at: https://en.wikipedia.org/wiki/Chudnovsky_algorithm
 *
 *          ___                     ___  -1
 *         |   _inf_                   |
 *         |   \         m_k * l_k     |
 * PI = D *|    \      -------------   |
 *         |    /           x_k        |
 *         |   /____                   |
 *         |   k = 0                   |
 *          ---                     ---
 *
 *  where:
 *    D =  426880 * sqrt(10005)
 *    l_k+1 = l_k + 545140134                                with  l_0 = 13591409
 *    x_k+1 = x_k * -262537412640768000                      with  x_0 = 1
 *    m_k+1 = m_k * ((n_k)^3 - 16 * n_k)/((k+1)^3)           with  m_0 = 1
 *    n_k+1 = n_k + 12                                       with  n_0 = 6
 *
 */


export class PI {
  private static _value: float;
  private static _numDigits: number;
  private static _reciprocal: float;
  private static _recipNumDigits: number;
  private static _mulTable: {[n: number]: {value: float, numDigits: number}};
  private static _divTable: {[n: number]: {value: float, numDigits: number}};
  private static _recipMulTable: {[n: number]: {value: float, numDigits: number}};
  private static _recipDivTable: {[n: number]: {value: float, numDigits: number}};

  public static value(prec: P): float {
    if (!PI._numDigits || PI._numDigits < prec.numDigits) {
      PI._value = PI.calculate(prec);
      PI._numDigits = prec.numDigits;
    }

    return PI._value
  }

  public static reciprocal(prec: P): float {
    if (!PI._recipNumDigits || PI._recipNumDigits < prec.numDigits) {
      PI._reciprocal = Basic.reciprocalF(PI.value(prec), prec);
      PI._recipNumDigits = prec.numDigits;
    }

    return PI._reciprocal;
  }

  public static mul(n: number, prec: P): float {
    if (typeof PI._mulTable === "undefined") { PI._mulTable = {}; }

    let entry = PI._mulTable[n];

    if (typeof entry === "undefined" || entry.numDigits < prec.numDigits) {
      entry = {
        value: Basic.multiplyFF(PI.value(prec), WHOLE.float(n), prec),
        numDigits: prec.numDigits
      };
      PI._mulTable[n] = entry;
    }

    return entry.value;
  }

  public static div(n: number, prec: P): float {
    if (typeof PI._divTable === "undefined") { PI._divTable = {}; }

    let entry = PI._divTable[n];

    if (typeof entry === "undefined" || entry.numDigits < prec.numDigits) {
      entry = {
        value: Basic.multiplyFF(PI.value(prec), RATIO.value(1, n, prec), prec),
        numDigits: prec.numDigits
      };
      PI._divTable[n] = entry;
    }

    return entry.value;
  }

  public static reciprocalMul(n: number, prec: P): float {
    if (typeof PI._recipMulTable === "undefined") { PI._recipMulTable = {}; }

    let entry = PI._recipMulTable[n];

    if (typeof entry === "undefined" || entry.numDigits < prec.numDigits) {
      entry = {
        value: Basic.multiplyFF(PI.reciprocal(prec), WHOLE.float(n), prec),
        numDigits: prec.numDigits
      };
      PI._recipMulTable[n] = entry;
    }

    return entry.value;
  }

  public static reciprocalDiv(n: number, prec: P): float {
    if (typeof PI._recipDivTable === "undefined") { PI._recipDivTable = {}; }

    let entry = PI._recipDivTable[n];

    if (typeof entry === "undefined" || entry.numDigits < prec.numDigits) {
      entry = {
        value: Basic.multiplyFF(
          PI.reciprocal(prec),
          RATIO.value(1, n, prec),
          prec
        ),
        numDigits: prec.numDigits
      };
      PI._recipDivTable[n] = entry;
    }

    return entry.value;
  }

  private static calculate(prec: P): float {
    const D: float = Basic.multiplyFF(
      WHOLE.float(426880),
      Root.squareF(WHOLE.float(10005), prec),
      prec
    );
    const iterations: number = Math.ceil(prec.binaryDigits / 47.110413138215842) + 1;
    const I_545140134 = WHOLE.int(545140134);
    const F_NEG_262537412640768000 = WHOLE.float(-262537412640768000);

    let kPlus1Cubed: float;
    let nkCubed: float;
    let nkTimes16: float;
    let lk: int = WHOLE.int(13591409);
    let xk: float = C.F_1;
    let nk: number = 6;
    let mkNum: float = C.F_1;
    let mkDenom: float = C.F_1;
    let termNum: float;
    let termDenom: float;
    let sumNum: float = WHOLE.float(13591409);
    let sumDenom: float = C.F_1;

    for(let k = 1; k <= iterations; k++) {
      kPlus1Cubed = k <= 208063 ?
        Core.numberToFloatUnchecked(Math.pow(k, 3))
        :
        Pow.fi(Core.numberToFloatUnchecked(k), C.I_3, prec);
      nkCubed = nk <= 208063 ?
        Core.numberToFloatUnchecked(Math.pow(nk, 3))
        :
        Pow.fi(Core.numberToFloatUnchecked(nk), C.I_3, prec);
      nkTimes16 = Core.numberToFloatUnchecked(nk * 16);

      lk = Basic.addII(lk, I_545140134);
      xk = Basic.multiplyFF(xk, F_NEG_262537412640768000, prec);

      mkNum = Basic.multiplyFF(mkNum, Basic.subtractFF(nkCubed, nkTimes16, prec), prec);
      mkDenom = Basic.multiplyFF(mkDenom, kPlus1Cubed, prec);

      termNum = Basic.multiplyFF(mkNum, Conversion.intToFloat(lk, prec), prec);
      termDenom = Basic.multiplyFF(mkDenom, xk, prec);

      sumNum = Basic.addFF(
        Basic.multiplyFF(sumNum, termDenom, prec),
        Basic.multiplyFF(sumDenom, termNum, prec),
        prec
      );
      sumDenom = Basic.multiplyFF(sumDenom, termDenom, prec);

      nk += 12;
    }

    return Basic.divideFF(Basic.multiplyFF(D, sumDenom, prec), sumNum, prec);
  }

}